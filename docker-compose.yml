version: '3.9'
services:
  data-setup:
    build:
      context: setup-data
      dockerfile: Dockerfile
    volumes:
      - ./neo4j/data:/neo4j/data
      - ./mongodb/data:/mongodb/data
  neo4j:
    image: neo4j:5.26
    container_name: neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"   # Browser
      - "7687:7687"   # Bolt (protocollo per Cypher)
    environment:
      NEO4J_AUTH: neo4j/password1234
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_dbms_connector_bolt_advertised__address: localhost:7687
    volumes:
      - ./neo4j/data:/var/lib/neo4j/import
      - ./neo4j/data:/var/lib/neo4j/data
    depends_on:
      data-setup:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "cypher-shell", "-u", "neo4j", "-p", "password1234", "RETURN 1" ]
      interval: 15s
      timeout: 20s
      retries: 15
  neo4j_seed:
    image: neo4j:5.26
    container_name: neo4j-seed
    depends_on:
      neo4j:
        condition: service_healthy
    volumes:
      - ./neo4j/scripts:/init
      - ./neo4j/data:/var/lib/neo4j/import
    entrypoint: [ "bash", "/init/init.sh" ]
  mongodb:
    image: mongo:8.0.11
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: password1234
      MONGO_INITDB_DATABASE: volcanoes
    volumes:
      - ./mongodb/data:/data/db
    depends_on:
      data-setup:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongo
      ME_CONFIG_MONGODB_ADMINPASSWORD: password1234
      ME_CONFIG_MONGODB_URL: mongodb://mongo:password1234@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin  # Username per accedere all'interfaccia web
      ME_CONFIG_BASICAUTH_PASSWORD: admin  # Password per accedere all'interfaccia web
    depends_on:
      mongodb:
        condition: service_healthy
      mongodb_seed:
        condition: service_completed_successfully
  mongodb_seed:
    container_name: mongodb-seed
    build:
      context: ./mongodb/script
      dockerfile: Dockerfile
    environment:
      MONGO_URL: mongodb://mongo:password1234@mongodb:27017/volcano?authSource=admin
      MONGO_DATABASE: volcanoes
      MONGO_USERNAME: mongo
      MONGO_PASSWORD: password1234
    volumes:
      - ./mongodb/data:/app/data
      - ./mongodb/script/seed_data.py:/app/seed_data.py
    depends_on:
      mongodb:
        condition: service_healthy
    restart: "no"
  cassandra:
    image: cassandra:5.0
    container_name: cassandra
    restart: unless-stopped
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_USER: cassandra
      CASSANDRA_PASSWORD: password1234
      CASSANDRA_SUPERUSER_PASSWORD: password1234
    volumes:
      - ./cassandra/data:/var/lib/cassandra/data
    depends_on:
      data-setup:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -u cassandra -p cassandra -e 'DESCRIBE KEYSPACES' || exit 1" ]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 30s
  cassandra_web:
    image: ipushc/cassandra-web
    container_name: cassandra_web
    depends_on:
      cassandra:
        condition: service_healthy
      cassandra_seed:
        condition: service_completed_successfully
    environment:
      - CASSANDRA_HOST=cassandra
      - CASSANDRA_PORT=9042
      - CASSANDRA_USER=cassandra
      - CASSANDRA_PASSWORD=password1234
    ports:
      - "8083:8083"
  cassandra_seed:
    container_name: cassandra-seed
    build:
      context: ./cassandra/script
      dockerfile: Dockerfile
    environment:
      CASSANDRA_HOST: cassandra
      CASSANDRA_PORT: 9042
      CASSANDRA_KEYSPACE: earthquakes
      CASSANDRA_USERNAME: cassandra
      CASSANDRA_PASSWORD: password1234
      INPUT_FILE: /app/data/earthquake.csv
    volumes:
      - ./cassandra/data:/app/data
      - ./cassandra/script/seed_data.py:/app/seed_data.py
    depends_on:
      cassandra:
        condition: service_healthy
    restart: "no"
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.2
    container_name: elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data
    depends_on:
      data-setup:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  kibana:
    image: docker.elastic.co/kibana/kibana:9.1.2
    container_name: kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana_seed:
        condition: service_completed_successfully
  kibana_seed:
    container_name: elasticsearch-seed
    build:
      context: ./elasticsearch/script
      dockerfile: Dockerfile
    environment:
      KIBANA_HOST: kibana
      KIBANA_PORT: 5601
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
      INDEX_NAME: tsunami_events
      ELASTICSEARCH_URL: http://elasticsearch:9200
      DATA_SOURCE_PATH: /app/data/tsunami.csv
    volumes:
      - ./elasticsearch/data:/app
      - ./elasticsearch/script/seed_data.py:/app/seed_data.py




